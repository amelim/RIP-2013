                                  [Image]
                     a SAT technology planning system
                         What's New in Version 3.0

                http://www.research.att.com/~kautz/blackbox

  ------------------------------------------------------------------------

                       blackbox = graphplan + satplan

Blackbox is a planning system that works by converting problems specified
in STRIPS notation into Boolean satisfiability problems, and then solving
the problems with a variety of state-of-the-art satisfiability engines. The
front-end employs the graphplan system (Blum and Furst 1995). There is
extreme flexibility in specifying the engines to use. For example, you can
tell it to use walksat (Selman, Kautz, and Cohen 1994) for 60 seconds, and
if that fails, then satz (Li and Anbulagan 1997) for 1000 seconds. This
gives blackbox the capability of functioning efficiently over a broad range
of problems. The name blackbox refers to the fact that the plan generator
knows nothing about the SAT solvers, and the SAT solvers know nothing about
plans: each is a "black box" to the other.

Read the paper "BLACKBOX: A New Approach to the Application of Theorem
Proving to Problem Solving" .

                            installing blackbox

Blackbox is currently available for Unix, and has been tested under Sun
Solaris, Linux, and SGI Irix.  Click here to download the sytem. Then:

     uudecode blackbox2_tar_Z.uu
     uncompress blackbox2.tar.Z
     tar xvfo blackbox2.tar
     cd blackbox
     make

Blackbox is a work in progress. Please let us know if you have downloaded
blackbox, so that we know who is using it and can send you notifications of
updates. (You will not be put on any mailing lists.) Send a note to:
kautz@research.att.com.

                               using blackbox

The input to blackbox are STRIPS-style problems in PDDL (Planning Domain
Definition Language).   To get started, try:

     cd Examples/logistics-strips
     blackbox -o domain.pddl -f  prob004-log-a.pddl

Blackbox has many options.   For help type:

     blackbox -help

Blackbox will print the solver schedule, and optionally the wff (in cnf or
literal form), the mapping from literals to propositions, the model found,
and the plan. The script "extract" can be used to extract the desired piece
from the output of blackbox.  For example, the following prints the wff
generated by the problem blocks.facts.easy:

     blackbox -o blocks.ops -f blocks.facts.easy -printcnf  -printexit |
     extract cnf

Performance on the hardest planning problems can be improved by tuning the
specific solver parameters, and in particular, the cutoff and noise
parameters for walksat, satz, or relsat.  The script Run-bb invokes
blackbox inside of a shell that terminates execution when specified CPU
memory limits are exceeded.

                             problem instances

The subdirectory Examples/ contains a small set of problem domains.  The
most extensive set of test examples are in Examples/logistics-strips. Here
is a solution to log-d , that contains 100 actions.  The script Solve-All
can be used to automatically run blackbox on all the instances in a
subdirectory.  The PDDL versions of the logistics and blocks world problems
used in the papers by Kautz and Selman (1996, 1998) are included.

                          the PDDL input language

The Planning Domain Definition Language (PDDL) was created by the AIPS-98
Planning Competition Committee, headed by Drew McDermott.  Blackbox
(version 2.0) reads this language as specified below.

   * (:requirements) may include :strips, :equality, and :typing.
   * Blackbox assumes that all parameters to an operator must be bound to
     different objects.  Therefore, inequality preconditions such as (not
     (= ?x ?y)) are handled simply by being ignored.  Strict equality
     conditions are unnecessary (simply use the same variable) and are not
     handled.  Note that the assumption that parameters are bound apart is
     not part of the PDDL definition (but is almost always useful).
   * (:constants) are not always parsed correctly.  If you get unexpected
     errors in domains including constants, try rewriting the domain so
     that they are not used.
   * Negated preconditions (other than equality) are handled by generating
     new predicates.  For example, a :precondition of (not (at ?x ?y)) is
     converted to (not-at ?x ?y), and appropriate additional :effects are
     added to all operators.  It is necessary to explicitly declare any
     negative facts that hold in the initial state that are needed to solve
     the plan.  Alternatively, the command line flag -n can be used to
     force Blackbox to make an explicit closed-world assumption, and add
     all negative facts to the initial state (however, this can be
     inefficient).  As a special case, if negative preconditions appear in
     some operator and no negative facts appear in the (:init) part of the
     instance, then the -n flag is automatically invoked.
   * Only simple typing information is supported.  In operator files,
     variables and objects should only have atomic types. The (:types)
     constructor should contain only a list of types (do not try to create
     subtypes or use fluents). In a problem problem, an object can be given
     several types by use of the (either) construct:
             (:objects  lincolncenter - LOCATION  jfk - (either AIRPORT
     LOCATION))
     Do not attempt to use types as unary predicates (as allowed by the
     PDDL definition); this will not work.
   * Input in case-insensitive.
   * All (:objects) must be declared in the problem instance.
   * The domain names must match in the operator and problem instance
     files.

                         what's new in version 3.0!

Version 3.0 adds the solver rel_sat_rand, a randomized/restart version of
the solver rel_sat created by Roberto Bayardo. Rel_sat performs
dependency-directed backtracking. It is invoked by the flag -relsat. This
version also improves the implementation of the parser.

Version 2.5 fixes a bug that caused some clauses in the generated wff to
appear twice, and allows detailed control over the kinds of axioms
generated during the translation.   The option -axoms N specifies what
kinds of axioms are generated, where N is a sum of the following:

   * 1 = mutex between incompatible actions
   * 2 = action implies precondition
   * 4 = fact implies disjunction of actions that add (frame axiom)
   * 8 = mutex between incompatible facts
   * 16 = action implies effect
   * 32 = do not prune mutexes between actions that logically follow from
     other axioms
   * 64 = include duplicate axioms generated by buggy versions 2.0 and
     earlier

The default translation is 7 (= 1+2+4).  Version 2.0 was equivalent to 71
(= 1+2+4+64).  The most compact translation is 31 (= 1+2+4+8+16), which
prunes out some of the mutexes between actions that logically follow from
the other axioms.  An expanded translation (which may be easier to solve
for some solvers) is 63 (= 1+2+4+8+16+32).

Version 2.5 also pretty prints the solution plan; the original format can
be printed by using the option -nopretty.

                            implementation notes

Version 1.0 of blackbox included the solvers graphplan, walksat, and
satz_rand.  Version 2.0 adds the simplifier compact and reads the input
language PDDL (Planning Definition Domain Language), the language of the
AIPS-98 planning competition.  Version 2.5 adds options for controlling the
axioms generated in the SAT translation.  Version 3.0 adds rel_sat_rand.
All versions still do not free up memory once it is allocated, and so may
run out of memory on large problems.

                                  credits

   * The overall design and implementation of blackbox, including the
     routines that convert planning graphs to formulas and back, was by
     Henry Kautz.
   * Henry Kautz and Bart Selman developed the idea of planning as
     propositional satisfiability testing in their work on SATPLAN.  Bart
     Selman first discovered a way to modify the graphplan system so that
     it could be used to produce CNF Boolean formulas.
   * The MEDIC system of Dan Weld, Michael Ernst, and Todd Millstein
     developed the idea of automatically generating and solving SAT
     representations of planning problems specified in STRIPS-like
     notation. (No actual code from MEDIC appears in blackbox.)
   * The front-end of blackbox is a modified version of the code of the
     graphplan system of Avrim Blum and Merrick Furst. This code reads in
     the problem specification, generates a planning graph, and
     incrementally enlarges the graph if necessary. Blackbox also includes
     the option of solving the problem using the original graph-search
     algorithms of graphplan.
   * The PDDL parser for blackbox was written by Yi-Cheng Huang.
   * The walksat solver was written by Henry Kautz, Bart Selman, and Bram
     Cohen, and was itself based on the GSAT solver of Bart Selman and
     David Mitchell.
   * Carla Gomes and Bart Selman developed the idea of combining
     randomization and restarts with systematic search procedures in order
     to reduce expected solution time.
   * The original satz solver was written by Chu Min Li and Anbulagan.
     Blackbox uses a modified version, satz_rand, that includes the option
     of performing randomized restarts in order to decrease the expected
     solution time. The rapid restart modifications were made by Bart
     Selman and Henry Kautz, and were based on ideas of Carla Gomes and
     Bart Selman.
   * The original rel_sat solver was written by Roberto Bayardo.   Blackbox
     uses a version modified by Henry Kautz, rel_sat_rand, that adds noise
     and a cutoff parameter.
   * The simplifier compact was created by Jimi Crawford.

                                bibliography

R. J. Bayardo Jr. and R. C. Schrag (1997). Using CSP look-back techniques
to solve real world SAT instances. Proc. AAAI-97.
A. Blum and M.L. Furst (1995). Fast planning through planning graph
analysis. Proc. IJCAI-95.
M.D. Ernst, T.D. Millstein, and D.S. Weld (1997). Automatic SAT-compilation
of planning problems. Proc. IJCAI-97.
Carla P. Gomes and Bart Selman (1997). Problem Structure in the Presence of
Perturbations. Proc. AAAI-97.
Carla P. Gomes, Bart Selman, and Henry Kautz (1998). Boosting Combinatorial
Search Through Randomization. Proc. AAAI-98.
Henry Kautz and Bart Selman (1992). Planning as Satisfiability. Proc.
ECAI-92.
Kautz, H. and Selman, B. (1996). Pushing the Envelope: Planning,
Propositional Logic, and Stochastic Search. Proc. AAAI-96.
Henry Kautz and Bart Selman (1998). The Role of Domain-Specific Knowledge
in the Planning as Satisfiability Framework. ( Figures.) Proc. AIPS-98,
Pittsburgh, PA.
Henry Kautz and Bart Selman (1998). BLACKBOX: A New Approach to the
Application of Theorem Proving to Problem Solving. Working notes of the
Workshop on Planning as Combinatorial Search, held in conjunction with
AIPS-98, Pittsburgh, PA, 1998.
Chu Min Li and Anbulagan (1997). Heuristics based on unit propagation for
satisfiability problems. Proc. IJCAI-97.
Drew McDermott and the AIPS-98 Planning Competition Committee.  PDDL - The
Planning Domain Definition Language, Draft 1.6, June 1998.
Bart Selman, Hector Levesque and David Mitchell (1992). A New Method for
Solving Hard Satisfiability Problems. Proc. AAAI-92.
Bart Selman, Henry Kautz, and Bram Cohen (1994). Noise Strategies for
Improving Local Search. Proc. AAAI-94.
  ------------------------------------------------------------------------
Thu Oct 29 15:14:57 EST 1998
Henry Kautz
Home page: http://www.research.att.com/~kautz
